# 1. Setup Google Colab & Import Library
print("\n===== 1. Setup Google Colab & Import Library =====")
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.metrics import silhouette_score
from google.colab import files

# 2. Upload Dataset
print("\n===== 2. Upload Dataset =====")
uploaded = files.upload()  # Upload file CSV dari komputer
df = pd.read_csv("wine.csv")  # Sesuaikan dengan nama file yang diupload

# 3. Load & Eksplorasi Data
print("\n===== 3. Load & Eksplorasi Data =====")
print("5 Baris Pertama Dataset:\n", df.head())
print("\nInformasi Dataset:")
print(df.info())
print("\nJumlah Missing Values per Kolom:\n", df.isnull().sum())
print("\nJumlah Duplikasi Data:", df.duplicated().sum())

# 4. Mengatasi Missing Values
print("\n===== 4. Mengatasi Missing Values =====")
imputer = SimpleImputer(strategy="mean")
df.iloc[:, 1:] = imputer.fit_transform(df.iloc[:, 1:])
print("Missing Values setelah Imputasi:\n", df.isnull().sum())

# 5. Menghapus Duplikasi Data
print("\n===== 5. Menghapus Duplikasi Data =====")
df = df.drop_duplicates()
print(f"Jumlah Data setelah Menghapus Duplikasi: {df.shape[0]} baris")

# 6. Cek & Ubah Tipe Data (Jika Perlu)
print("\n===== 6. Cek & Ubah Tipe Data =====")
print("Tipe Data Sebelum Konversi:\n", df.dtypes)
for col in df.columns:
    if df[col].dtype == "object":
        df[col] = pd.to_numeric(df[col], errors="coerce")  # Konversi ke numerik
print("\nTipe Data Setelah Konversi:\n", df.dtypes)

# 7. Normalisasi Data
print("\n===== 7. Normalisasi Data =====")
X = df.drop(columns=["Wine"])
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_scaled_df = pd.DataFrame(X_scaled, columns=X.columns)
print("5 Baris Pertama Setelah Normalisasi:\n", X_scaled_df.head())

# 8. Tentukan Jumlah Klaster (Elbow Method)
print("\n===== 8. Menentukan Jumlah Klaster dengan Elbow Method =====")
wcss = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_scaled)
    wcss.append(kmeans.inertia_)
    
plt.figure(figsize=(8, 5))
plt.plot(range(1, 11), wcss, marker='o', linestyle='--')
plt.xlabel("Jumlah Klaster (K)")
plt.ylabel("WCSS (Within Cluster Sum of Squares)")
plt.title("Elbow Method untuk Menentukan K")
plt.show()

# 9. Terapkan K-Means dengan K Optimal
print("\n===== 9. Terapkan K-Means dengan K Optimal =====")
kmeans = KMeans(n_clusters=3, random_state=42)
df["Cluster"] = kmeans.fit_predict(X_scaled)
print("\nJumlah Sampel dalam Setiap Klaster:\n", df["Cluster"].value_counts())

# 10. Evaluasi Model dengan Silhouette Score
print("\n===== 10. Evaluasi Model dengan Silhouette Score =====")
silhouette_avg = silhouette_score(X_scaled, df["Cluster"])
print(f"Silhouette Score: {silhouette_avg:.3f}")

# 11. Visualisasi Hasil Klaster
print("\n===== 11. Visualisasi Hasil Klaster =====")
plt.figure(figsize=(8, 5))
sns.scatterplot(x=X_scaled[:, 0], y=X_scaled[:, 1], hue=df["Cluster"], palette="viridis")
plt.xlabel("Fitur 1 (Scaled)")
plt.ylabel("Fitur 2 (Scaled)")
plt.title("Visualisasi K-Means Clustering pada Data Wine")
plt.show()

# 12. Analisis Hasil Klaster
print("\n===== 12. Analisis Hasil Klaster =====")
print("Rata-rata Nilai Fitur untuk Setiap Klaster:\n", df.groupby("Cluster").mean())

# 13. Simpan Hasil
print("\n===== 13. Simpan Hasil =====")
df.to_csv("WINE_Clustered.csv", index=False)
files.download("WINE_Clustered.csv")
print("File WINE_Clustered.csv berhasil disimpan & siap diunduh!")
